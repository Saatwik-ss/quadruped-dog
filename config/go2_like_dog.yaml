# Configuration for a Go2-like Quadruped Robot Model
# This YAML structure is intended to be parsed by the script yaml2mjcf.py
# to generate the corresponding MuJoCo XML file.

robot_name: "Go2 Like Quadruped"

simulation:
  timestep: 0.002
  integrator: "RK4"
  gravity: [0, 0, -9.81] # Although flag is used in XML, good to have value here

compiler:
  angle: "degree"
  coordinate: "local"
  inertiafromgeom: "auto" # Set to 'false' if providing manual inertias below
  inertiagrouprange: "4 4" # Use geom group 4 (feet) for auto inertia calculation

visuals:
  # Define materials, textures etc. Can be more detailed if needed.
  materials:
    robot_mat: { rgba: [0.8, 0.7, 0.5, 1.0], specular: 0.5, shininess: 0.5, reflectance: 0.5 }
    foot_mat: { rgba: [0.2, 0.2, 0.2, 1.0], specular: 0.1, shininess: 0.1 }

defaults:
  joint:
    type: "hinge"
    damping: 0.2
    armature: 0.01 # Motor inertia felt at the joint
    limited: true
  geom:
    type: "capsule" # Default shape for links
    size: 0.025     # Default radius/size for capsules
    material: "robot_mat"
    condim: 3
    friction: [1.0, 0.1, 0.1] #sliding, torsional, rolling
    solref: [0.01, 1]     # Stiffness and damping parameters for contact
    solimp: [0.95, 0.99, 0.001] # contact impedance parameters
  motor:
    ctrlrange: [-1.0, 1.0] #normalized control input range
    ctrllimited: true

robot_body:
  torso:
    name: "torso"
    pos: [0, 0, 0.3] # Initial position [x, y, z]
    geom_type: "box"
    size: [0.2, 0.07, 0.04] # Half lengths[dx,dy,dz]
    mass: 5.0
    # inertial: {pos:[0,0,0],mass: 5.0,diag: [0.1,0.1,0.1]} # Optional: Manual Inertia

  legs:
    # Common parameters for leg segments
    thigh_length: 0.2
    calf_length: 0.2
    hip_offset_y: 0.05 # Offset from hip joint axis to thigh joint axis
    abad_link_length: 0.05 # Length of the small link for abduction/adduction
    foot_radius: 0.03
    link_radius: 0.025 # Radius for thigh/calf capsules

    # Individual leg definitions
    FR: # Front Right
      hip_attach_pos: [0.18, -0.05, 0] # Attachment point on torso
      sign_y: -1 # Used to flip y-offsets and potentially axes/ranges if needed
      joints:
        hip:   { name: "FR_hip_joint",   axis: [1, 0, 0], range: [-45, 45],  motor_gear: 20 }
        thigh: { name: "FR_thigh_joint", axis: [0, 1, 0], range: [-90, 90],  motor_gear: 30 }
        calf:  { name: "FR_calf_joint",  axis: [0, 1, 0], range: [-150, -30], motor_gear: 30 } # Knee usually has negative range

    FL: # Front Left
      hip_attach_pos: [0.18, 0.05, 0]
      sign_y: 1
      joints:
        hip:   { name: "FL_hip_joint",   axis: [1, 0, 0], range: [-45, 45],  motor_gear: 20 }
        thigh: { name: "FL_thigh_joint", axis: [0, 1, 0], range: [-90, 90],  motor_gear: 30 }
        calf:  { name: "FL_calf_joint",  axis: [0, 1, 0], range: [-150, -30], motor_gear: 30 }

    RR: # Rear Right
      hip_attach_pos: [-0.18, -0.05, 0]
      sign_y: -1
      joints:
        hip:   { name: "RR_hip_joint",   axis: [1, 0, 0], range: [-45, 45],  motor_gear: 20 }
        thigh: { name: "RR_thigh_joint", axis: [0, 1, 0], range: [-90, 90],  motor_gear: 30 }
        calf:  { name: "RR_calf_joint",  axis: [0, 1, 0], range: [-150, -30], motor_gear: 30 }

    RL: # Rear Left
      hip_attach_pos: [-0.18, 0.05, 0]
      sign_y: 1
      joints:
        hip:   { name: "RL_hip_joint",   axis: [1, 0, 0], range: [-45, 45],  motor_gear: 20 }
        thigh: { name: "RL_thigh_joint", axis: [0, 1, 0], range: [-90, 90],  motor_gear: 30 }
        calf:  { name: "RL_calf_joint",  axis: [0, 1, 0], range: [-150, -30], motor_gear: 30 }

sensors: # List sensors to include in the generated XML
  # Torso IMU-like
  - type: "framepos"
    objtype: "body"
    objname: "torso"
  - type: "framequat"
    objtype: "body"
    objname: "torso"
  - type: "framelinvel"
    objtype: "body"
    objname: "torso"
  - type: "frameangvel"
    objtype: "body"
    objname: "torso"
  - type: "accelerometer"
    site: "torso" # Assumes site named 'torso' exists at body origin
  - type: "gyro"
    site: "torso"

  # Joint Sensors (generate for all 12 joints based on leg definitions above)
  - type: "jointpos" # Script should generate for all defined joints
  - type: "jointvel" # Script should generate for all defined joints

  # Actuator Sensors (generate for all 12 actuators based on leg definitions)
  - type: "actuatorfrc" # Script should generate for all defined motors

  # Touch Sensors (optional, require sites defined in XML)
  # - type: "touch"
  #   site: "FR_foot_site" # Script needs to ensure these sites exist
  # ... repeat for FL, RR, RL
